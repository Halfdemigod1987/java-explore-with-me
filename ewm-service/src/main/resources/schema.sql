DROP TABLE IF EXISTS users, categories, events, requests, compilations, events_compilations;

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email VARCHAR(255),
    name VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id),
    CONSTRAINT users_name_unq UNIQUE (name)
    );
CREATE TABLE IF NOT EXISTS categories (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_categories PRIMARY KEY (id),
    CONSTRAINT categories_name_unq UNIQUE (name)
    );
CREATE TABLE IF NOT EXISTS events (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR(2000),
    category_id INTEGER,
    description VARCHAR(7000),
    event_date timestamp,
    lat DOUBLE PRECISION,
    lon DOUBLE PRECISION,
    paid BOOLEAN,
    participant_limit INTEGER,
    request_moderation BOOLEAN,
    title VARCHAR(120),
    initiator_id INTEGER,
    created_date TIMESTAMP,
    published_date TIMESTAMP,
    views INTEGER,
    state VARCHAR,
    CONSTRAINT pk_events PRIMARY KEY (id),
    CONSTRAINT fk_event_category FOREIGN KEY (category_id) REFERENCES categories(id),
    CONSTRAINT fk_event_initiator FOREIGN KEY (initiator_id) REFERENCES users(id)
);
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id INTEGER,
    requester_id INTEGER,
    status VARCHAR(10),
    created_date TIMESTAMP,
    CONSTRAINT pk_requests PRIMARY KEY (id),
    CONSTRAINT fk_request_event FOREIGN KEY (event_id) REFERENCES events(id),
    CONSTRAINT fk_request_requester FOREIGN KEY (requester_id) REFERENCES users(id)
);
CREATE TABLE IF NOT EXISTS compilations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    pinned BOOLEAN,
    title VARCHAR(120),
    CONSTRAINT pk_compilations PRIMARY KEY (id)

);
CREATE TABLE IF NOT EXISTS events_compilations (
    event_id INTEGER,
    compilation_id INTEGER,
    PRIMARY KEY (event_id, compilation_id),
    CONSTRAINT fk_events_compilations_event FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT fk_events_compilations_compilation FOREIGN KEY (compilation_id) REFERENCES compilations(id) ON DELETE CASCADE
);
